# Denne dokumentasjonen er skrev i "du/dere"-form, hvor du/dere er produsenter, og "vi" er
# notifikasjons-plattformen.


directive @Validate on ARGUMENT_DEFINITION
directive @MaxLength(max: Int) on INPUT_FIELD_DEFINITION
directive @NonIdentifying on INPUT_FIELD_DEFINITION
directive @ExactlyOneFieldGiven on INPUT_OBJECT
directive @MaxValue(upToIncluding: Int) on ARGUMENT_DEFINITION

"""
DateTime med offset etter ISO8601-standaren. F.eks. '2011-12-03T10:15:30+01:00'.

Er representert som String.
"""
scalar ISO8601DateTime

"""
Dato og lokaltid etter ISO8601-standaren. F.eks. '2001-12-24T10:44:01'.
Vi tolker tidspunktet som Oslo-tid ('Europe/Oslo').
"""
scalar ISO8601LocalDateTime

# scalar NotifikasjonCursor

"""
Tilstanden til en oppgave.
"""
enum OppgaveTilstand {
    """
    En oppgave som kan utføres.
    """
    NY

    """
    En oppgave som allerede er utført.
    """
    UTFOERT
}

"""
Dette er roten som alle forespørsler starter fra.
"""
type Query {
    """
    Egnet for feilsøking. Forteller hvem du er autentisert som.
    """
    whoami: String

    """
    Vi bruker det Connections-patternet for paginering. Se
    [Connection-standaren](https://relay.dev/graphql/connections.htm) for mer
    informasjon.

    Dere må gjenta paremetere når dere blar gjennom alle notifikasjonen.

    Hvis verken `merkelapp` eller `merkelapper` er gitt, vil notifikasjoner
    med alle dine merkelapper være med.
    """
    mineNotifikasjoner(
        "antall notifikasjoner du ønsker å hente"
        first: Int @Validate @MaxValue(upToIncluding: 10000)

        """Cursor til notifikasjonen du henter fra. Cursor får du fra [NotifikasjonEdge](#notifikasjonedge)."""
        after: String

        """Filtrer på merkelapp. Kan ikke brukes sammen med `merkelapper`."""
        merkelapp: String

        """Filtrer på merkelapper. Kan ikke brukes sammen med `merkelapp`."""
        merkelapper: [String!]

        grupperingsid: String
    ): MineNotifikasjonerResultat!
}

union MineNotifikasjonerResultat =
    | NotifikasjonConnection
    | UgyldigMerkelapp
    | UkjentProdusent

type NotifikasjonConnection {
    edges: [NotifikasjonEdge!]!
    pageInfo: PageInfo!
}

type NotifikasjonEdge {
    node: Notifikasjon!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: String!
}

union Notifikasjon = Beskjed | Oppgave

type Oppgave {
    mottaker: Mottaker!
    metadata: Metadata!
    oppgave: OppgaveData!
    eksterneVarsler: [EksterntVarsel!]!
}

type Beskjed {
    mottaker: Mottaker!
    metadata: Metadata!
    beskjed: BeskjedData!
    eksterneVarsler: [EksterntVarsel!]!
}

union Mottaker =
    | AltinnMottaker
    | NaermesteLederMottaker

type AltinnMottaker {
    serviceCode: String!
    serviceEdition: String!
    virksomhetsnummer: String!
}

type NaermesteLederMottaker {
    naermesteLederFnr: String!
    ansattFnr: String!
    virksomhetsnummer: String!
}

type OppgaveData {
    tilstand: OppgaveTilstand

    """
    Merkelapp for beskjeden. Er typisk navnet på ytelse eller lignende. Den vises til brukeren.
    """
    merkelapp: String!

    """
    Teksten som vises til brukeren.
    """
    tekst: String!

    """
    Lenken som brukeren føres til hvis de klikker på beskjeden.
    """
    lenke: String!
}

type BeskjedData {
    """
    Merkelapp for beskjeden. Er typisk navnet på ytelse eller lignende. Den vises til brukeren.
    """
    merkelapp: String!

    """
    Teksten som vises til brukeren.
    """
    tekst: String!

    """
    Lenken som brukeren føres til hvis de klikker på beskjeden.
    """
    lenke: String!
}

type Metadata {
    id: ID!

    """
    """
    eksternId: String!

    """
    """
    opprettetTidspunkt: ISO8601DateTime

    """
    """
    grupperingsid: String

    softDeleted: Boolean!

    softDeletedAt: ISO8601DateTime
}

type EksterntVarsel {
    id: ID!
    status: EksterntVarselStatus!
}

enum EksterntVarselStatus {
    NY
    SENDT
    FEILET
}


"""
Dette er roten som alle endringer ("mutations") starter fra. Endringer inkluderer også
å opprette nye ting.
"""
type Mutation {
    """
    Opprett en ny beskjed.
    """
    nyBeskjed(nyBeskjed: NyBeskjedInput! @Validate): NyBeskjedResultat!

    """
    Opprett en ny oppgave.
    """
    nyOppgave(nyOppgave: NyOppgaveInput! @Validate): NyOppgaveResultat!

    """
    Marker en oppgave (identifisert ved id) som utført.
    """
    oppgaveUtfoert(
        """
        ID-en som oppgaven har. Den du fikk da du opprettet oppgaven med `nyOppgave`.
        """
        id: ID!
    ): OppgaveUtfoertResultat!

    """
    Marker en oppgave (identifisert ved ekstern id) som utført.
    """
    oppgaveUtfoertByEksternId(
        """
        Merkelapp som oppgaven er registrert med.
        """
        merkelapp: String!,

        """
        ID-en som *dere ga oss* da dere opprettet oppgaven med `nyOppgave`.
        """
        eksternId: ID!
    ): OppgaveUtfoertResultat!


    """
    Markerer en notifikasjon som slettet (soft delete).

    Notifikasjonen vil forsvinne helt for mottakeren: de vil ikke kunne se den på
    noen som helst måte — som om notifikasjonen aldri eksisterte.

    For dere (produsenter), så kan dere fortsatt se notifikasjonen i listen over deres notifikasjoner.

    Eventuelle eksterne varsler (SMS, e-post) knyttet til notifikasjonen vil bli fortsatt bli sendt.

    Advarsel: det er ikke mulig å angre på denne operasjonen.
    """
    softDeleteNotifikasjon(id: ID!): SoftDeleteNotifikasjonResultat!

    """
    Se dokumentasjon for `softDeleteNotifikasjon(id)`.
    """
    softDeleteNotifikasjonByEksternId(
        """
        Merkelappen som dere ga oss da dere opprettet notifikasjonen.
        """
        merkelapp: String!,

        """
        ID-en som dere ga oss da dere opprettet notifikasjonen.
        """
        eksternId: ID!
    ): SoftDeleteNotifikasjonResultat!

    """
    Sletter en notifikasjon og tilhørende data helt fra databasen og kafka.
    Formålet er å støtte juridiske krav om sletting i henhold til personvern.

    Eventuelle eksterne varsler (SMS, e-post) knyttet til notifikasjonen vil bli fortsatt bli sendt.

    Advarsel: det er ikke mulig å angre på denne operasjonen. All data blir borte for godt.
    """
    hardDeleteNotifikasjon(id: ID!): HardDeleteNotifikasjonResultat!

    """
    Se dokumentasjon for `hardDeleteNotifikasjon(id)`.
    """
    hardDeleteNotifikasjonByEksternId(
        """
        Merkelappen som dere ga oss da dere opprettet notifikasjonen.
        """
        merkelapp: String!,

        """
        ID-en som dere ga oss da dere opprettet notifikasjonen.
        """
        eksternId: ID!
    ): HardDeleteNotifikasjonResultat!
}

union SoftDeleteNotifikasjonResultat =
    | SoftDeleteNotifikasjonVellykket
    | UgyldigMerkelapp
    | NotifikasjonFinnesIkke
    | UkjentProdusent

type SoftDeleteNotifikasjonVellykket {
    """
    ID-en til oppgaven du "soft-delete"-et.
    """
    id: ID!
}

union HardDeleteNotifikasjonResultat =
    | HardDeleteNotifikasjonVellykket
    | UgyldigMerkelapp
    | NotifikasjonFinnesIkke
    | UkjentProdusent

type HardDeleteNotifikasjonVellykket {
    """
    ID-en til oppgaven du "hard-delete"-et.
    """
    id: ID!
}

union OppgaveUtfoertResultat =
    | OppgaveUtfoertVellykket
    | UgyldigMerkelapp
    | NotifikasjonFinnesIkke
    | UkjentProdusent

type OppgaveUtfoertVellykket {
    """
    ID-en til oppgaven du oppdaterte.
    """
    id: ID!
}

input NyBeskjedInput {
    mottaker: MottakerInput!
    notifikasjon: NotifikasjonInput!
    metadata: MetadataInput!
    eksterneVarsler: [EksterntVarselInput!]! = []
}

input NyOppgaveInput {
    mottaker: MottakerInput!
    notifikasjon: NotifikasjonInput!
    metadata: MetadataInput!
    eksterneVarsler: [EksterntVarselInput!]! = []
}

input EksterntVarselInput @ExactlyOneFieldGiven {
    sms: EksterntVarselSmsInput
    epost: EksterntVarselEpostInput
}

enum Sendevindu {
    """
    Vi sender varselet slik at mottaker skal ha mulighet for å kontakte NAVs
    kontaktsenter (NKS). Varsler blir sendt litt før NKS åpner, og vi slutter å
    sende litt før NKS stenger.

    Vi tar foreløpig ikke hensyn til røde dager eller produksjonshendelser som fører til
    at NKS er utilgjengelig.
    """
    NKS_AAPNINGSTID


    """
    Vi sender varselet på dagtid, mandag til lørdag.
    Altså sender vi ikke om kvelden og om natten, og ikke i det hele tatt på søndager.

    Vi tar ikke hensyn til røde dager.
    """
    DAGTID_IKKE_SOENDAG

    """
    Vi sender varslet så fort vi kan.
    """
    LOEPENDE
}

"""
Med denne typen velger du når du ønsker at det eksterne varselet blir sendt.
Du skal velge en (og kun en) av feltene, ellers blir forespørselen din avvist
med en feil.
"""
input SendetidspunktInput @ExactlyOneFieldGiven {
    """
    Hvis du spesifiserer et tidspunkt på formen "YYYY-MM-DDThh:mm", så sender
    vi notifikasjonen på det tidspunktet. Oppgir du et tidspunkt i fortiden,
    så sender vi varselet øyeblikkelig.

    Tidspunktet tolker vi som lokal, norsk tid (veggklokke-tid).
    """
    tidspunkt: ISO8601LocalDateTime

    sendevindu: Sendevindu
}


input EksterntVarselSmsInput {
    mottaker: SmsMottakerInput!
    """
    Teksten som sendes i SMS-en.
    OBS: Det er ikke lov med personopplysninger i teksten. SMS er ikke en sikker kanal.
    """
    smsTekst: String!
    sendetidspunkt: SendetidspunktInput!
}

input EksterntVarselEpostInput {
    mottaker: EpostMottakerInput!
    """
    Subject/emne til e-posten.
    OBS: Det er ikke lov med personopplysninger i teksten. E-post er ikke en sikker kanal.
    """
    epostTittel: String!
    """
    Kroppen til e-posten. Tolkes som HTML.
    OBS: Det er ikke lov med personopplysninger i teksten. E-post er ikke en sikker kanal.
    """
    epostHtmlBody: String!
    sendetidspunkt: SendetidspunktInput!
}

input SmsMottakerInput @ExactlyOneFieldGiven {
    kontaktinfo: SmsKontaktInfoInput
    # altinntjeneste: Altinntjeneste
}

input SmsKontaktInfoInput {
    fnr: String!
    tlf: String! # Validate regex ?
}

input EpostMottakerInput @ExactlyOneFieldGiven {
    kontaktinfo: EpostKontaktInfoInput
    # altinntjeneste: Altinntjeneste
}

input EpostKontaktInfoInput {
    fnr: String!
    epostadresse: String!
}

# input Altinntjeneste {
#     virksomhetsnummer: String!
#     serviceCode: String!
#     serviceCodeEdition: String!
# }

"""
Hvem som skal se notifikasjonen.

Du kan spesifisere mottaker av notifikasjoner på forskjellige måter. Du skal bruke nøyaktig ett av feltene.

Vi har implementert det på denne måten fordi GraphQL ikke støtter union-typer som input.
"""
input MottakerInput @ExactlyOneFieldGiven {
    altinn: AltinnMottakerInput
    naermesteLeder: NaermesteLederMottakerInput
}

"""
Spesifiser mottaker ved hjelp av tilganger i Altinn. Enhver som har den gitte tilgangen vil
kunne se notifikasjone.

Tilgangssjekken utføres hver gang en bruker ser på notifikasjoner. Det betyr at hvis en
bruker mister en Altinn-tilgang, så vil de hverken se historiske eller nye notifikasjone knyttet til den Altinn-tilgangen.
Og motsatt, hvis en bruker får en Altinn-tilgang, vil de se tidligere notifikasjoner for den Altinn-tilgangen.
"""
input AltinnMottakerInput {
    serviceCode: String!
    serviceEdition: String!
    virksomhetsnummer: String!
}

"""
Spesifiser mottaker ved hjelp av fødselsnummer. Fødselsnummeret er det til nærmeste leder. Det er kun denne personen
som potensielt kan se notifikasjonen. Det er videre en sjekk for å se om denne personen fortsatt er nærmeste leder
for den ansatte notifikasjonen gjelder.

Tilgangssjekken utføres hver gang en bruker ønsker se notifikasjonen.
"""
input NaermesteLederMottakerInput {
    naermesteLederFnr: String!
    ansattFnr: String!
    virksomhetsnummer: String!
}

"""
"""
input NotifikasjonInput {
    """
    Merkelapp for beskjeden. Er typisk navnet på ytelse eller lignende. Den vises til brukeren.

    Hva du kan oppgi som merkelapp er bestemt av produsent-registeret.
    """
    merkelapp: String!

    """
    Teksten som vises til brukeren.
    """
    tekst: String! @MaxLength(max: 300) @NonIdentifying

    """
    Lenken som brukeren føres til hvis de klikker på beskjeden.
    """
    lenke: String!
}

input MetadataInput {
    """
    """
    eksternId: String!

    """
    """
    opprettetTidspunkt: ISO8601DateTime

    """
    """
    grupperingsid: String
}

union NyOppgaveResultat =
    | NyOppgaveVellykket
    | UgyldigMerkelapp
    | UgyldigMottaker
    | DuplikatEksternIdOgMerkelapp
    | UkjentProdusent

union NyBeskjedResultat =
    | NyBeskjedVellykket
    | UgyldigMerkelapp
    | UgyldigMottaker
    | DuplikatEksternIdOgMerkelapp
    | UkjentProdusent

type NyBeskjedVellykket {
    id: ID!
    eksterneVarsler: [NyEksterntVarselResultat!]!
}

type NyEksterntVarselResultat {
    id: ID!
}

type NyOppgaveVellykket {
    id: ID!
    eksterneVarsler: [NyEksterntVarselResultat!]!
}

"""
Denne feilen returneres dersom en produsent forsøker å benytte en merkelapp som den ikke har tilgang til.
"""
type UgyldigMerkelapp implements Error {
    feilmelding: String!
}

"""
Denne feilen returneres dersom en produsent forsøker å benytte en mottaker som den ikke har tilgang til.
"""
type UgyldigMottaker implements Error {
    feilmelding: String!
}

"""
Denne feilen returneres dersom vi ikke greier å finne dere i produsent-registeret vårt.
"""
type UkjentProdusent implements Error {
    feilmelding: String!
}

"""
Denne feilen returneres dersom du prøver å referere til en notifikasjon
som ikke eksisterer.

Utover at dere kan ha oppgitt feil informasjon, så kan det potensielt være på grunn
av "eventual consistency" i systemet vårt.
"""
type NotifikasjonFinnesIkke implements Error {
    feilmelding: String!
}

"""
Denne feilen returneres dersom du prøver å opprette en notifikasjon med en eksternId og merkelapp som allerede finnes
"""
type DuplikatEksternIdOgMerkelapp implements Error {
    feilmelding: String!
}

interface Error {
    feilmelding: String!
}
